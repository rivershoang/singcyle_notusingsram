AddressInit:
# base-address s0 = 0x7000
li s0, 0x7000
addi s1, s0, 0x0000     # LEDR[16:0] address: s1 = 0x7000    
addi s2, s0, 0x0010     # LEDG[7:0] address: s2 = 0x7010
addi s3, s0, 0x0020     # _HEX3_HEX2_HEX1_HEX0 address: s3 = 0x7020
addi s4, s0, 0x0024     # _HEX7_HEX6_HEX5_HEX4 address: s4 = 0x7024
addi s5, s0, 0x0030     # LCD address: s5 = 0x7030
addi s6, s0, 0x0400
addi s6, s6, 0x0400     # SW[16:0] address: s6 = 0x7800 (0 - 131071 decimal)
addi s7, s6, 0x0010     # KEY[3:0] address: s7 = 0x7810, RESET - START - STOP
addi s8, x0, 1          # SW[0] = 1 >> RESET
addi s9, x0, 2          # SW[1] = 1 >> START
addi s10, x0, 0x00      # 10ms counter
                        # 0x0000 is the starting point of Stack

# Destructed reg: t1, t2
# t2 = 0x100 is the start-address of LUT(0-9)
Bin2SegLUT:
   addi t2, x0, 0x100
   addi t1, x0, 0x40
   sw t1, 0(t2)
   addi t2, x0, 0x104
   addi t1, x0, 0x79
   sw t1, 0(t2)
   addi t2, x0, 0x108
   addi t1, x0, 0x24
   sw t1, 0(t2)
   addi t2, x0, 0x10c
   addi t1, x0, 0x30
   sw t1, 0(t2)
   addi t2, x0, 0x110
   addi t1, x0, 0x19
   sw t1, 0(t2)
   addi t2, x0, 0x114
   addi t1, x0, 0x12
   sw t1, 0(t2)
   addi t2, x0, 0x118
   addi t1, x0, 0x02
   sw t1, 0(t2)
   addi t2, x0, 0x11c
   addi t1, x0, 0x78
   sw t1, 0(t2)
   addi t2, x0, 0x120
   addi t1, x0, 0x00
   sw t1, 0(t2)
   addi t2, x0, 0x124
   addi t1, x0, 0x10
   sw t1, 0(t2)

MAIN:
CHECK_RESET:   lw t0, 0(s6)
               bne t0, s8, NOT_RESET
               addi s10, x0, 0
               jal ra, DISPLAY_0
NOT_RESET:  
CHECK_START:   lw t0, 0(s6)
               bne t0, s9, NOT_START
               jal ra, DELAY10MS
               addi s10, s10, 1
               jal ra, DISPLAY
               jal ra, MAIN
NOT_START:     jal ra, CHECK_START
      
# Destructed reg: t0, t1, t2
# Input: t0
# Output: t0 (remainder), t1 (quotient)
DIV6000:
   li t1, 0
   li t2, -6000
DIV6000_LOOP:
   addi t1, t1, 1
   add t0, t0, t2
   bge t0, x0, DIV6000_LOOP

   addi t1, t1, -1
   li t2, 6000
   add t0, t0, t2
   jalr x0, ra, 0

DIV100:
   li t1, 0
   li t2, -100
DIV100_LOOP:
   addi t1, t1, 1
   add  t0, t0, t2
   bge  t0, x0, DIV100_LOOP
   
   addi t1, t1, -1
   li t2, 100
   add  t0, t0, t2
   jalr x0, ra, 0

DIV10:
   li t1, 0
   li t2, -10
DIV10_LOOP:
   addi t1, t1, 1
   add  t0, t0, t2
   bge  t0, x0, DIV10_LOOP
   
   addi t1, t1, -1
   li t2, 10
   add  t0, t0, t2
   jalr x0, ra, 0


# Destructed reg: t1, t2, t3
# Input: t1
# Output: HEX_ hold t1 seg
STORE_HEX0:
   lw t2, 0(s3)
   li t3, 0xFFFFFF00
   and t2, t2, t3
   or t1, t1, t2
   sw t1, 0(s3)
   jalr x0, ra, 0

STORE_HEX1:
   lw t2, 0(s3)
   li t3, 0xFFFF00FF
   and t2, t2, t3
   slli t1, t1, 8
   or t1, t1, t2
   sw t1, 0(s3)
   jalr x0, ra, 0

STORE_HEX2:
   lw t2, 0(s3)
   li t3, 0xFF00FFFF
   and t2, t2, t3
   slli t1, t1, 16
   or t1, t1, t2
   sw t1, 0(s3)
   jalr x0, ra, 0

STORE_HEX3:
   lw t2, 0(s3)
   li t3, 0x00FFFFFF
   and t2, t2, t3
   slli t1, t1, 24
   or t1, t1, t2
   sw t1, 0(s3)
   jalr x0, ra, 0

STORE_HEX4:
   lw t2, 0(s4)
   li t3, 0xFFFFFF00
   and t2, t2, t3
   or t1, t1, t2
   sw t1, 0(s4)
   jalr x0, ra, 0

STORE_HEX5:
   lw t2, 0(s4)
   li t3, 0xFFFF00FF
   and t2, t2, t3
   slli t1, t1, 8
   or t1, t1, t2
   sw t1, 0(s4)
   jalr x0, ra, 0

STORE_HEX6:
   lw t2, 0(s4)
   li t3, 0xFF00FFFF
   and t2, t2, t3
   slli t1, t1, 16
   or t1, t1, t2
   sw t1, 0(s4)
   jalr x0, ra, 0
   
STORE_HEX7:
   lw t2, 0(s4)
   li t3, 0x00FFFFFF
   and t2, t2, t3
   slli t1, t1, 24
   or t1, t1, t2
   sw t1, 0(s4)
   jalr x0, ra, 0

# Destructed reg: no register were harmed
# DELAY 1 centisecond = 10 milisecond
# 20ns + 40ns + x*60ns + 20ns + 20ns = 10ms => x = 166665
DELAY10MS:
   sw t0, 0x00(x0)         # 20ns
   li t0, 250000           # 40ns
DELAY10MS_LOOP:   # 60ns
   addi t0, t0, -1               # 20ns
   bne  t0, x0, DELAY10MS_LOOP   # 20ns

   lw t0, 0x00(x0)               # 20ns
   jalr x0, ra, 0                # 20ns

# Destructed reg: no register were harmed
# Input: s10
# Output: Display the s10 (centisecond counter) to 6 seg
DISPLAY:
   sw t0, 0x00(x0)
   sw t1, 0x04(x0)
   sw t2, 0x08(x0)
   sw t3, 0x0C(x0)
   sw ra, 0x10(x0)

   addi t0, s10, 0      # t0 = s10
   jal ra, DIV6000      # t1 = s10 // 6000
   addi t0, t1, 0       # t0 = s10 // 6000
   jal ra, DIV10        # t1 = m1, t0 = m2
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX5   # display m1
   addi t1, t0, 0       # t1 = m2
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX4   # display m2

   addi t0, s10, 0      # t0 = s10
   jal ra, DIV6000      # t0 = s10 % 6000
   jal ra, DIV100       # t1 = (s10 % 6000) // 100
   addi t0, t1, 0       # t0 = (s10 % 6000) // 100
   jal ra, DIV10        # t1 = s1, t0 = s2
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX3   # display s1
   addi t1, t0, 0       # t1 = s2
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX2   # display s2

   addi t0, s10, 0      # t0 = s10
   jal ra, DIV100       # t0 = (s10 % 100)
   jal ra, DIV10        # t1 = c1, t0 = c2
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX1   # display c1
   addi t1, t0, 0       # t1 = c2
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX0   # display c2

   lw ra, 0x10(x0)
   lw t3, 0x0C(x0)
   lw t2, 0x08(x0)
   lw t1, 0x04(x0)
   lw t0, 0x00(x0)
   jalr x0, ra, 0

# Destructed reg: no register were harmed
# Input: none
# Output: Display the all zeros to 6 seg
DISPLAY_0:
   sw t1, 0x00(x0)
   sw t2, 0x04(x0)
   sw t3, 0x08(x0)
   sw ra, 0x0C(x0)
   
   addi t1, x0, 0
   slli t1, t1, 2    
   lw t1, 0x100(t1)
   jal ra, STORE_HEX5
   addi t1, x0, 0
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX4
   addi t1, x0, 0
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX3
   addi t1, x0, 0
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX2
   addi t1, x0, 0
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX1
   addi t1, x0, 0
   slli t1, t1, 2
   lw t1, 0x100(t1)
   jal ra, STORE_HEX0

   lw ra, 0x0C(x0)
   lw t3, 0x08(x0)
   lw t2, 0x04(x0)
   lw t1, 0x00(x0)

   jalr x0, ra, 0